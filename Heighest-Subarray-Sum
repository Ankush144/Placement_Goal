/* TIME COMPLEXITY : O(N^3) WORST SOLUTION */

	int SubArraySum(int *arr,int n){
		int sum =0;
	    int maxm=INT_MIN;
		for(int i=0;i<n;i++){
			for(int j=i;j<n;j++){
				sum=0;
				for(int k=i;k<=j;k++){
					sum = sum + arr[k];
				}
				maxm = max(maxm,sum);
			}
		}
		return maxm;
	}
------------------------------------------------------------------------------------------------
/* TIME COMPLEXITY : O(N^2) [Prefix Sum Solution] */

		int SubArraySum(int *arr,int n){
			int sum =0;
			int oldsum =0;
		    int maxm=INT_MIN;
			for(int i=0;i<n;i++){
				sum = 0;
				for(int j=i;j<n;j++){
				    sum = sum + arr[j];
					maxm = max(maxm,sum);
				}
			}
			return maxm;
		}
------------------------------------------------------------------------------------------------
  /* TIME COMPLEXITY : O(N) [KADEN'S ALGORITHM] */   
  
	  int SubArraySum(int *arr,int n){
				int sum =arr[0];
			    int maxm=arr[0];
				for(int i=1;i<n;i++){
					if(sum < arr[i]) sum = arr[i];
					else{
						sum = sum + arr[i];
					}
				   maxm = max(maxm,sum);
				}
				return maxm;
	}
  ------------------------------------------------------------------------------------------------
  

